// This is a part of the String Table Library.
// Modification History

#ifndef __HSLStringTableLibImpl_hs___
#define __HSLStringTableLibImpl_hs___	1

// Implementation of String Table library 
#ifdef HSL_RUNTIME
namespace StringTable
{
	// data

	static variable entry[];											// string table entries
	static variable initializedStr(hslFalse);						// initialization state of the string table

	// functions

	static function StringTable();									// loads the string table, implemented by the client of this library

	function Insert(														// inserts a string into the string table
		variable ids,														// i: string id
		variable& str) void;												// i: string 
	
	static function Assert(												// assert function 
		variable expr,														// i: specifies a numeric expression that evaluates to nonzero or 0
		variable location) void;										// i: location (string or number)
	
   // implementation

	function Insert(variable ids, variable& str) void
	{
		if (entry.GetSize() < ids + 1)
			entry.SetSize(ids + 1);
		entry.SetAt(ids, str);
	}

	function Init(variable& librayName) void
	{
		if (!initializedStr)
		{
			string str;
			variable stringTableFileName;

			stringTableFileName = librayName + GetLanguage() + ".hs_";
			//ba 2004-01-14 begin
			if ("" == SearchPath(stringTableFileName))
				stringTableFileName = librayName + "Enu.hs_";
			// end
			str = stringTableFileName;
			<< str;
			StringTable();
			initializedStr = hslTrue;
		}
	}

	function Load(variable ids) variable
	{
		Assert(0 <= ids && ids <= entry.GetSize(), GetFunctionName());
		if (0 <= ids && ids <= entry.GetSize())
			return(entry.GetAt(ids));
		return("");
	}

	function Dump() void
	{
		variable i;
		for (i = 0; i < entry.GetSize(); i++)
			Trace(Load(i));
	}

	function Assert(variable expr, variable location) void
	{
		#ifdef _DEBUGStringTable
		if (!expr)
		{
			variable type(GetType(location));
			if (hslInteger.Compare(GetType(type)) == 0)
				location = IStr(type);
			if (hslFloat.Compare(GetType(type)) == 0)
				location = FStr(type);
			MessageBox("Debug Assertion failed", "Debug Error - " + location, hslError|hslOKOnly);
			abort;
		}
		#endif
	}
}
#endif
#endif
