// ======================================================================
// This is a part of the Utility Library.
//
// ======================================================================
// Modification History
//
// ======================================================================

#ifndef __HSLUtilLib_hsl__
#define __HSLUtilLib_hsl__ 1

#pragma once
#include "HSLExtensions/HSLStringTableLib.hsl"

// --------------------------------------------------------------------------------------
// Implementation of the Utility Library
// --------------------------------------------------------------------------------------

#ifdef HSL_RUNTIME
namespace Util
{
   // --------------------------------------------------------------------------------------
   // Debugging
   // --------------------------------------------------------------------------------------

   //#define _DEBUG     1                                               // specifies the debug version of the pipetting library

   // --------------------------------------------------------------------------------------
   // Traceing
   // --------------------------------------------------------------------------------------

   namespace TraceStatus
   {
      static const variable start(1);                                // action status for formated trace
      static const variable complete(2);                             // action status for formated trace
      static const variable error_(3);                               // action status for formated trace
      static const variable progress(4);                             // action status for formated trace
      static const variable completeWithError(5);                    // action status for formated trace
   }

   // --------------------------------------------------------------------------------------
   // Error Ids
   // --------------------------------------------------------------------------------------

   namespace IDE
   {
      static const variable first(0);                                // guard
      static const variable noError(first);                          // No error.
      static const variable invalidParameter(first + 1);             // The parameter is incorrect.
      static const variable last(first + 1);                         // guard
   }

   // --------------------------------------------------------------------------------------
   // String Ids
   // --------------------------------------------------------------------------------------

   namespace IDS
   {
      static const variable first(IDE::last + 1);                    // guard
      static const variable helpFileName(first + 2);                 // help file name
      static const variable last(first + 2);                         // guard
   }

   // --------------------------------------------------------------------------------------
   // Library Initialization 
   // --------------------------------------------------------------------------------------

   static variable initializedLib(hslFalse);                         // initialization state of the utility library
   static function InitUtilityLibrary()                              // initializes the utility library (only once)
   {
      // initialize the pipetting utility once only
      if (!initializedLib)
      {
         StringTable::Init("HSLUtilLib");
         #ifdef _DEBUG
         //StringTable::Dump();
         #endif
         initializedLib = hslTrue;
      }
      return(initializedLib);
   }

   // --------------------------------------------------------------------------------------
   // Exception Handling
   // --------------------------------------------------------------------------------------

   namespace Error
   {
      static function Raise(                                         // raises a runtime error
         variable errorId,                                           // i: error id, one of IDE
         variable& fileName,                                         // i: file name
         variable& funcName,                                         // i: function name
         variable& lineNumber)                                       // i: line number
      {
         variable description("");

         // set error description
         description = fileName + "(" + lineNumber + ") : " + funcName + "()\n" + StringTable::Load(errorId);
         err.SetDescription(description);

         // raise error
         err.Raise(errorId, err.GetDescription(), StringTable::Load(IDS::helpFileName));
      }
   }

   // --------------------------------------------------------------------------------------
   // Function Implementation 
   // --------------------------------------------------------------------------------------

   function Min(variable var1, variable var2) variable
   {
      if (var1 <= var2)
         return(var1);
      return(var2);
   }

   function Max(variable var1, variable var2) variable
   {
      if (var1 <= var2)
         return(var2);
      return(var1);
   }

   function IsString(variable var) variable
   {
      return(hslString.Compare(GetType(var)) == 0);
   }

   function IsNumber(variable var) variable
   {
      variable type;
      type = GetType(var);
      return(hslString.Compare(type) != 0 && "" != type);
   }

   function IsInteger(variable var) variable
   {
      return(hslInteger.Compare(GetType(var)) == 0);
   }

   function IsFloat(variable var) variable
   {
      return(hslFloat.Compare(GetType(var)) == 0);
   }

   function IsNegative(variable number) variable
   {

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsNumber(number))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      return(number < 0);
   }

   function Abs(variable number) variable
   {
      if (number < 0)
         return(- number);
      return(number);
   }

   static function Lookup(variable& varArr[], variable& value, variable& index) variable
   {
      variable found(hslFalse);                          // gets true if value was found in varArr
      variable size(0);                                  // the size of varArr
      variable isString(hslFalse);                       // indicates if the value searched is of type string
      variable currentValue;

      // do a sequential search
      isString = IsString(value);
      size = varArr.GetSize();
      if (isString)
      {
         for (index = 0; index < size; index++)
         {
            currentValue = varArr.GetAt(index);
            if (IsString(currentValue) && currentValue == value)
            {
               found = hslTrue;
               break;
            }
         }
      }
      else
      {
         for (index = 0; index < size; index++)
         {
            currentValue = varArr.GetAt(index);
            if (IsNumber(currentValue) && currentValue == value)
            {
               found = hslTrue;
               break;
            }
         }
      }
      if (!found)
         index =  0;
      return(found);
   }

   static function Sort(variable& values[], variable& keys[]) void
   {
      // bubblesort, see N.Wirth
      variable i, j, x;
      variable size;

      size = Util::Min(values.GetSize(), keys.GetSize());
      for (i = 1; i < size; i++)
      {
         for (j = size - 1; i <= j; j--)
         {
            if (keys.GetAt(j) < keys.GetAt(j-1))
            {
               x = keys.GetAt(j-1);
               keys.SetAt(j-1, keys.GetAt(j));
               keys.SetAt(j, x);

               x = values.GetAt(j-1);
               values.SetAt(j-1, values.GetAt(j));
               values.SetAt(j, x);
            }
         }
      }
   }

   function SyncShell(
      variable& pathname,
      variable windowstyle,
      variable& exitCode) variable
   {
      event eventObj;

      // dump params
      #ifdef _DEBUG 
      variable source;
      variable action;

      source = "DEBUG  ";
      action = GetFunctionName();
      FormatTrace(source, action, TraceStatus::progress, "pathname = ", pathname);
      FormatTrace(source, action, TraceStatus::progress, "windowstyle = ", windowstyle);
      FormatTrace(source, action, TraceStatus::progress, "exitCode = ", exitCode);
      #endif

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(pathname))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsNumber(windowstyle))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsInteger(windowstyle))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (windowstyle < 1 || 4 < windowstyle)
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // run the executable program
      return(Shell(pathname, windowstyle, hslSynchronous, eventObj, exitCode));
   }

   function AsyncShell(
      variable& pathname,
      variable windowstyle,
      event& eventObj,
      variable& exitCode) variable
   {

      // dump params
      #ifdef _DEBUG 
      variable source;
      variable action;

      source = "DEBUG  ";
      action = GetFunctionName();
      FormatTrace(source, action, TraceStatus::progress, "pathname = ", pathname);
      FormatTrace(source, action, TraceStatus::progress, "windowstyle = ", windowstyle);
      FormatTrace(source, action, TraceStatus::progress, "eventObj = ", eventObj);
      FormatTrace(source, action, TraceStatus::progress, "exitCode = ", exitCode);
      #endif

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(pathname))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsNumber(windowstyle))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsInteger(windowstyle))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (windowstyle < 1 || 4 < windowstyle)
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // run the executable program
      return(Shell(pathname, windowstyle, hslAsynchronous, eventObj, exitCode));
   }

   function Pause() void
   {
      pause;
   }

   function Lock() void
   {
      lock;
   }

   function Unlock() void
   {
      unlock;
   }

   function GetUserName() variable
   {
      return(::GetUserName());
   }

   function AddCheckSum(variable& fileName, variable& commentDelimiter) variable
   {

      // dump params
      #ifdef _DEBUG 
      variable source;
      variable action;

      source = "DEBUG  ";
      action = GetFunctionName();
      FormatTrace(source, action, TraceStatus::progress, "fileName = ", fileName);
      FormatTrace(source, action, TraceStatus::progress, "commentDelimiter = ", commentDelimiter);
      #endif

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(fileName))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsString(commentDelimiter))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // add check sum
      return(::AddCheckSum(fileName, commentDelimiter));
   }

   function VerifyCheckSum(variable& fileName) variable
   {

      // dump params
      #ifdef _DEBUG 
      variable source;
      variable action;

      source = "DEBUG  ";
      action = GetFunctionName();
      FormatTrace(source, action, TraceStatus::progress, "fileName = ", fileName);
      #endif

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(fileName))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // verify check sum
      return(::VerifyCheckSum(fileName));
   }

   function GetIVDSystem() variable
   {
      // get IVD System flag
      return(::GetIVDSystem());
   }

   function GetBarcodeJoker(variable& barcodeJokerKey) variable
   {
      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(barcodeJokerKey))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // get barcode jokers
      return(::GetBarcodeJoker(barcodeJokerKey));
   }

   function GetUniqueRunId() variable
   {
      // get unique run id
      return(::GetUniqueRunId());
   }

   function GetHWnd() variable
   {
      // get unique run id
      return(::GetHWnd());
   }

   function GetLanguage() variable
   {
      // get language
      return(::GetLanguage());
   }

   function RegisterAbortHandler(variable& abortHandler) void
   {
      // register abort handler
      ::RegisterAbortHandler(abortHandler);
   }

   function UnregisterAbortHandler(variable& abortHandler) void
   {
      // register abort handler
      ::UnregisterAbortHandler(abortHandler);
   }

   function SendEMail(                             
                       variable to,        // i: the receiver of the email
                       variable subject,   // i: the subject of the email
                       variable body       // i: the body of the email
                     ) variable            // o: return value  hslTrue  = the email was sending succefully
                                           //                  hslFalse = the email was not sending
   {
     object   emailObj;              // Object for Hamilton.HxServices.HxEmail
     string   errorMessage;          // errorMessage for CheckEmailAddress()
     #ifdef _DEBUG 
     variable source;
     variable action;
     source = "DEBUG  ";
     action = GetFunctionName();
     #endif

      // dump params
      #ifdef _DEBUG 
      FormatTrace(source, action, TraceStatus::progress, "to = ", to);
      FormatTrace(source, action, TraceStatus::progress, "subject = ", subject);
      FormatTrace(source, action, TraceStatus::progress, "body = ", body);
      #endif

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(to))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsString(subject))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (!IsString(body))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (to=="")
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // prepare the email object
      emailObj.CreateObject("Hamilton.HxServicesEmail");

      // check the email adress
      if (emailObj.CheckEmailAddress(to,errorMessage)==hslFalse)
      {
         #ifdef _DEBUG 
         FormatTrace(source, action, TraceStatus::error_, "CheckEmailAddress("+to+",...)=",errorMessage);
         #endif
         // email was not sending
         return(hslFalse);
      }

      // catch the error
      onerror goto SendEMail_Error;

      // sending the email
      emailObj.Send(to,subject,body);

      // email sending succefully
      return(hslTrue);

      // catch the error
      SendEMail_Error :
      {
         #ifdef _DEBUG 
         FormatTrace(source, action, TraceStatus::error_, "Send("+to+",...)=","EMail could not sent");
         #endif
         // email was not sending
         return(hslFalse);
      }
   }                 

   function GetEMailAddressOfSender() variable
   {
      // return the e-mail address of the sender as configured using HxGruConfig.exe
      object mailSettings;
      mailSettings.CreateObject("Hamilton.HxServicesEmail");
      return(mailSettings.SenderAddress);
   }

   function SetEMailAddressOfSender(variable& newEMailAddressOfSender) void
   {
      object mailSettings;

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(newEMailAddressOfSender))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // set the e-mail address of the sender analogous to using HxGruConfig.exe
      mailSettings.CreateObject("Hamilton.HxServicesEmail");
      mailSettings.SenderAddress = newEMailAddressOfSender;
   }

   function GetSMTPServerHostName() variable
   {
      // return the SMTP server host name as configured using HxGruConfig.exe
      object mailSettings;
      mailSettings.CreateObject("Hamilton.HxServicesEmail");
      return(mailSettings.SmptHostName);
   }

   function SetSMTPServerHostName(variable& newSMTPServerHostName) void
   {
      object mailSettings;

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(newSMTPServerHostName))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // set the SMTP server host name analogous to using HxGruConfig.exe
      mailSettings.CreateObject("Hamilton.HxServicesEmail");
      mailSettings.SmptHostName = newSMTPServerHostName;
   }

   function GetSimulationMode() variable
   {
      return(::GetSimulationMode());
   }


   function GetTimerViewName(timer timerObject) variable
   {
      return(timerObject.GetTimerViewName());
   }

   function SetTimerViewName(timer timerObject, variable& timerViewName) void
   {
      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(timerViewName))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // set timer view name
      timerObject.SetTimerViewName(timerViewName);
   }

   function GetTimeScaleFactor() variable
   {
      return(::GetTimeScaleFactor());
   }

   function SetTimeScaleFactor(variable timeScaleFactor) void
   {
      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsNumber(timeScaleFactor))
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      if (timeScaleFactor <= 0.0)
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());

      // set time scale factor
      ::SetTimeScaleFactor(timeScaleFactor);
   }

   // --------------------------------------------------------------------------------------
   // Action functions
   // --------------------------------------------------------------------------------------

   // The GetCurrentMethodViewName function retrieves the view name of the current method.
   function GetCurrentMethodViewName() variable
   {
      // initialize utility library
      InitUtilityLibrary();

      return(GetCurrentTaskViewName());
   }

   // The GetCurrentActionViewName function retrieves the view name of the current action.
   function GetCurrentActionViewName() variable
   {
      // initialize utility library
      InitUtilityLibrary();

      return(GetCurrentActivityViewName());
   }


   // The SetCurrentMethodViewName function sets the view name of the current method.
   function SetCurrentMethodViewName(variable& methodViewName) void
   {
      variable currentTaskId(0);

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(methodViewName))
      {
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      }

      currentTaskId = GetCurrentTaskId();
      if (0 < currentTaskId)
      {
         SetTaskViewName(currentTaskId, methodViewName);
      }
   }


   // The SetCurrentMethodDescription function sets the description of the current method.
   function SetCurrentMethodDescription(variable& methodDescription) void
   {
      variable currentTaskId(0);

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(methodDescription))
      {
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      }

      currentTaskId = GetCurrentTaskId();
      if (0 < currentTaskId)
      {
         SetTaskDescription(currentTaskId, methodDescription);
      }
   }


   // The SetCurrentActionDescription function sets the description of the current action.
   function SetCurrentActionDescription(variable& actionDescription) void
   {
      variable currentTaskId(0);

      // initialize utility library
      InitUtilityLibrary();

      // check params to be valid
      if (!IsString(actionDescription))
      {
         Error::Raise(IDE::invalidParameter, GetFileName(), GetFunctionName(), GetLineNumber());
      }

      SetCurrentActivityDescription(actionDescription);
   }
}
#endif
#endif
