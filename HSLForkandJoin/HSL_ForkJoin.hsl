//Matt Morrison's Fork and Join HSL Library.
// ******Beta verson1.3
// Questions email: Mathew.Morrison@hamiltoncompany.com
//
//Description: Forks into submethod.
//
//Params: 
//i_strThread:   (string) Reference to SMT
//Return:  On successful execution returns handle for use in JoinThread
//On Error: Returns (hslFalse) (0)  
//
//----------------------------------------------------------------------------------
//
//Rev hist.: HVestin - Added an interface to keep inline with function library structure. 

#ifndef __HSLForkJoin_hsl__
#define __HSLForkJoin_hsl__ 1

#ifndef HSL_RUNTIME
namespace Fork_Join
{
   function ForkThread(variable i_strThread) variable {return(0);} 
   function JoinThread(variable i_ThreadHandle) variable {return(0);}
}
#endif

#ifdef HSL_RUNTIME
namespace Fork_Join
{
	////////////////// FUNCTION FORK THREAD
	function ForkThread(variable i_strThread) variable 
	{ 
		//declare variables
		variable varThreadHandle;
		onerror goto myErrorHandler;
		Trace("$$$$$$$  START FORK INTO", i_strThread, "$$$$$$$$$");
		varThreadHandle  =   Fork(i_strThread);
		
		//Trace(varThreadHandle); 
		Trace("$$$$$$$ FORK INTO", i_strThread, " COMPLETED SUCCESSFULLY $$$$$$$$$");
		return(varThreadHandle);
		myErrorHandler : 
		{
			variable strErrorDescription;
			Trace("***************** AN ERROR HAS OCCURED DURING FORK FUNCTION. SEE DESCRIPTION BELOW*****************");
			strErrorDescription = err.GetDescription( );
			Trace(strErrorDescription);
			err.Clear( );
			return(hslFalse);
		}//end error handler		
	}  //end function
	//onerror goto myErrorHandler;
	
	////////////////// FUNCTION JOIN THREAD	
	function JoinThread(variable i_ThreadHandle) variable
	{
		//declare variables
		variable varReturnJoin;
		variable currentDeckPath;
		variable strFunctionName;
		strFunctionName = GetFunctionName();
		onerror goto myErrorHandler;
		Trace("$$$$$$$ START *******", strFunctionName,"  ****** $$$$$$$$$");
		varReturnJoin =  Join( i_ThreadHandle, hslInfinite );
		Trace("$$$$$$$ JOIN THREAD COMPLETED SUCCESSFULLY $$$$$$$$$");
		return(hslTrue);
		myErrorHandler : 
		{
			variable strErrorDescription;
			Trace("***************** AN ERROR HAS OCCURED DURING JOIN FUNCTION. SEE DESCRIPTION BELOW*****************");
			strErrorDescription = err.GetDescription( );
			Trace(strErrorDescription);
			err.Clear( );
			return(hslFalse);
		}
	}
} // namespace Fork_Join
#endif
#endif
