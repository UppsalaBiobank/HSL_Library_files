// ======================================================================
// This is a part of the easyCodeII library.
// ======================================================================
//
// Modification History
//
// ======================================================================
#ifndef   __easyCODEII_Libary_hsl__
#define   __easyCODEII_Libary_hsl__ 1

//Implementation of easyCodeII library
#ifdef HSL_RUNETIME
#pragma once
#include "easyCodeII_LibraryImpl.hs_"
#endif

#ifndef HSL_RUNETIME
	namespace EASYCODEII
	{
      const variable _TRACE_LEVEL_NONE(0);
      const variable _TRACE_LEVEL_NORMAL(1);
      const variable _TRACE_LEVEL_FULL(2);
      
      const variable _DATABASE_RETURN_VALUE_NO_ID_FOUND(-1);
      const variable _HSLTRUE(hslTrue);
      const variable _HSLFALSE(hslFalse);
      const variable _SIMULATION_MODE_OFF(hslFalse);                           
      const variable _SIMULATION_MODE_ON(hslTrue);                             
      global variable _EASYCODEII_SimulationMode;
      
      namespace EASYCODEII_HELPER
      {
         namespace LIGHTSOURCE
         {
            const variable _NO_LIGHT                     (0);   // None
            const variable _MLSTAR_DIV2_PWM1             (1);   // DIV2
            const variable _MLSTAR_DIV2_PWM2             (2);   // DIV2
            const variable _MLSTAR_DIV3_PWM3             (3);   // DIV3
            const variable _MLSTAR_DIV3_PWM4             (4);   // DIV3
            const variable _CAMERA_CHANNEL               (5);   // Camera Channel
            const variable _CAMERA_FLASH_OUTPUTPORT      (6);   // Camera Flash Output Port
         } // namespace LIGHTSOURCE
         namespace SORTORDER
         {
            const variable _ASCENDING                    (0);   // Ascending
            const variable _COLUMN_BY_COLUMN             (1);   // Column by column
         } // namespace SORTORDER
        	namespace GROUPNAME
        	{
        		const variable _RACK                         ("Side");      // 1D Rack side code
        		const variable _TUBES                        ("Tubes");     // Tubes
        		const variable _BOTTOM_TL                    ("Bottom_TL"); // 2D Rack bottom code top left
        		const variable _BOTTOM_BR                    ("Bottom_BR"); // 2D Rack bottom code bottom right
      	} // namespace GROUPNAME
    	} // namespace EASYCODEII_HELPER
      
    // Errors (Return values of all functions)
    	namespace ERROR
    	{
      	const variable _NONE                           (0);   // No error
      	namespace GENERAL
      	{
      		const variable _LIBRARY                      (1);   // HSL-Library error
      		const variable _MLSTAR                       (2);   // MLStar-Library error
      		const variable _APPLICATION                  (3);   // Application error
      	} // namespace GENERAL
      	namespace DATABASE
      	{
      		const variable _READ                         (87);  // Database read error
      		const variable _WRITE                        (88);  // Database write error
      		const variable _UPDATE                       (89);  // Database update error
      	} // namespace DATABASE
      	namespace BARCODE
      	{
      		const variable _MORE_THAN_ONE_BARCODE_FOUND  (103);
      	  	const variable _NO_BARCODE_DECOED            (104);
      	  	const variable _WRONG_BARCODE_MASK           (105);
      	  	const variable _NO_BARCODE_DETECTED          (106);
      	 	const variable _NO_READABLE_CHARACTERS       (107);
      	  	const variable _NO_BARCODE_DEFINED           (140);
      	} // namespace BARCODE
    	} // namespace ERROR

      namespace INIT
		{
			function Init(
				device	& ML_STAR,					// Device
				variable iTraceLevel,				// Desired Tracelevel
				variable iApplicationInit			// Should the application also be initialized
				) variable {return(0);}				// Return: _NONE			= Init successfully carried out
													//		_LIBRARY_ERROR = Init could not be carried out
	
			function DeInit(
				) variable {return(0);}							// Return: _NONE			= DeInit successfully carried out
													//		_LIBRARY_ERROR = DeInit could not be carried out
			function SetSimulationMode(
				variable iSimulationMode			// Desired SimulationMode
				) variable {return(0);}				// Return: ReturnValue
			function GetSimulationMode(
				variable & oSimulationMode			// Simulation-Mode
				) variable {return(0);}			// Return: ReturnValue
			} //namespace INIT
		
		namespace APPLICATION
		{
			function IsRunning(
				variable & oApplicationRunningFlag		// Application RunningFlag
				) variable {return(0);}				// Return: ReturnValue
			function GetApplicationStartError(
				variable & oApplicationStartError		// Application Start Error
				) variable {return(0);}				// Return: ReturnValue
			function GetErrorText(
				variable iErrorNr,		// Application Fehler-Nummer
				variable & oErrorText		// Application Fehler-Text
				) variable {return(0);}		// Return: Fehlertext
			function Get_ProgrammPath(
				variable & oProgrammPath		// Programm - Path
				) variable {return(0);}	// Return: ReturnValue
			} //namespace APPLICATION
	
		namespace APPLICATIONSETTINGS
		{
			function Get_DatabasePicturePath(
				variable & oDatabasePicturePath		// Database Picture Path
				) variable {return(0);}		// Return: ReturnValue
		} //namespace APPLICATIONSETTINGS
	
		namespace GUI
		{
			function Show(
				variable iMode
				) variable {return(0);}	// Return: ReturnValue
			function Hide(
				) variable {return(0);}	// Return: ReturnValue
			function IsVisible(
				variable & oIsVisible
				) variable {return(0);}	// Return: ReturnValue
	
			namespace LIVEVIEW
			{
				function Show(
					variable iMode
					) variable {return(0);}	// Return: ReturnValue
				function Hide(
					) variable {return(0);}	// Return: ReturnValue			
				function IsVisible(
					variable & oIsVisible
					) variable {return(0);}	// Return: ReturnValue
				function SavePicture(
					variable iPictureFilename,		// Name des Bildes
					variable iPictureFormat,	// Picture Format
					variable iPictureSizePercent
					) variable {return(0);}		// Return: ReturnValue
			
			namespace FOCUS
			{
				function Show(
					variable iPositionX,			// Position X
					variable iPositionY,			// Position Y
					variable iSizeX,			// Size X
					variable iSizeY,			// Size Y
					variable iAngle,			// Angle
					variable iGradientValueThreshold,	// Gradient value threshold
					variable iGradientValueSensibility // Gradient value sensibility
					) variable {return(0);}		// Return: ReturnValue
				function GetCurrentValue(
					variable & oCurrentGradientValueThreshold,
					variable & oMaximumGradientValueThreshold,
					variable & oLowerLimitGradientValueThreshold,
					variable & oValueInTollerance
					) variable {return(0);}		// Return: ReturnValue
			}//namespace FOCUS
			
			namespace APERTURE
			{
				function Show(
					variable iPositionX,			// Position X
					variable iPositionY,			// Position Y
					variable iSizeX,			// Size X
					variable iSizeY,			// Size Y
					variable iAngle,			// Angle
					variable iGrayValueCenter,		// Gray value center
					variable iGrayValueSensibility // Gray value sensibility
					) variable {return(0);}		// Return: ReturnValue
				function GetCurrentValue(
					variable & oCurrentGrayValueCenter,
					variable & oLowerLimitGrayValueCenter,
					variable & oUpperLimitGrayValueCenter,
					variable & oValueInTollerance
					) variable {return(0);}		// Return: ReturnValue
			}//namespace APERTURE
			
			namespace HOMOGENEOUS
			{
				function Show(
					variable iPositionX,			// Position X
					variable iPositionY,			// Position Y
					variable iSizeX,		// Size X
					variable iSizeY,		// Size Y
					variable iAngle,		// Angle
					variable iFilterMode,			// Filter mode
					variable iHomogeneousValueThreshold,	// Value threshold
					variable iHomogeneousValueSensibility	// Value sensibility
					) variable {return(0);}				// Return: ReturnValue
				function GetCurrentValue(
					variable & oCurrentHomogeneousValue,
					variable & oMaximumHomogeneousValue,
					variable & oLowerLimitHomogeneousValue,
					variable & oValueInTollerance
					) variable {return(0);}		// Return: ReturnValue
			}//namespace HOMOGENEOUS
			
			namespace DRAW
			{
				function ClearAll(
					) variable {return(0);}	// Return: ReturnValue
				function Clear(
					variable iObjectName	// Name des Objects
					) variable {return(0);}			// Return: ReturnValue
				function Picture(
					variable iObjectName,		// Name des Objects
					variable iPictureFileName,
					variable iPositionX,	// PositionX [Prozent]
					variable iPositionY,	// PositionY [Prozent]
					variable iScale,			// Scale
					variable iAngle			// Angle
					) variable {return(0);}			// Return: ReturnValue
				function Cross(
					variable iObjectName,		// Name des Objects
					variable iPositionX,	// PositionX [Prozent]
					variable iPositionY,	// PositionY [Prozent]
					variable iSize,			// Size [Prozent]
					variable iAngle,			// Angle
					variable iColor,			// Color
					variable iLineSize		// LineSize
					) variable {return(0);}			// Return: ReturnValue
				function Ellipse(
					variable iObjectName,		// Name des Objects
					variable iPositionX,	// PositionX [Prozent]
					variable iPositionY,	// PositionY [Prozent]
					variable iSizeX,			// SizeX [Prozent]
					variable iSizeY,			// SizeY [Prozent]
					variable iAngle,			// Angle
					variable iColor,			// Color
					variable iLineSize,	// LineSize
					variable iDrawMode		// DrawMode
					) variable {return(0);}			// Return: ReturnValue
				function Rectangle(
					variable iObjectName,		// Name des Objects
					variable iPositionX,	// PositionX [Prozent]
					variable iPositionY,	// PositionY [Prozent]
					variable iSizeX,			// SizeX [Prozent]
					variable iSizeY,			// SizeY [Prozent]
					variable iAngle,			// Angle
					variable iColor,			// Color
					variable iLineSize,	// LineSize
					variable iDrawMode		// DrawMode
					) variable {return(0);}			// Return: ReturnValue
				function Line(
					variable iObjectName,		// Name des Objects
					variable iPosition1X,		// Position 1 X [Prozent]
					variable iPosition1Y,		// Position 1 Y [Prozent]
					variable iPosition2X,		// Position 2 X [Prozent]
					variable iPosition2Y,		// Position 2 Y [Prozent]
					variable iColor,			// Color
					variable iLineSize		// LineSize
					) variable {return(0);}			// Return: ReturnValue
				function Text(
					variable iObjectName,		// Name des Objects
					variable iPositionX,	// PositionX [Prozent]
					variable iPositionY,	// PositionY [Prozent]
					variable iText,			// Text
					variable iColor,			// Color
					variable iFontName,	// FontName
					variable iTextSize		// TextSize
					) variable {return(0);}			// Return: ReturnValue
			} //namespace DRAW
		} //namespace LIVEVIEW
	} //namespace GUI
	
		namespace CAMERA
		{
			function Open(
				variable iSettingNameCamera	// Name der Settings
				) variable {return(0);}			// Return: ReturnValue
			function Close(
				) variable {return(0);}			// Return: ReturnValue
			function IsOpen(
				variable & oCameraIsOpen		// Camera open flag
				) variable {return(0);}			// Return: ReturnValue
			function TakePicture(
				) variable {return(0);}		// Return: ReturnValue
			function SavePicture(
				variable iPictureFilename,		// Name des Bildes
				variable iPictureFormat,	// Picture Format
				variable iPictureSizePercent
				) variable {return(0);}		// Return: ReturnValue
			function LoadPicture(
				variable iPictureFilename		// Name des Bildes
				) variable {return(0);}		// Return: ReturnValue
			function SetOutputPortFlash(
				variable iOn		// 
				) variable {return(0);}		// Return: ReturnValue
		}
		namespace SETTINGS
		{		
			function SelectCameraSettings(
					variable iDefaultSettingNameCamera, // Name der Vorgabe-Settings
					variable & oSettingNameCamera	// Name der Settings
					) variable {return(0);}			// Return: ReturnValue
			function SelectBarcodeSettings(
					variable iDefaultSettingNameBarcode,	// Name der Vorgabe-Settings
					variable & oSettingNameBarcode		// Name der Settings
					) variable {return(0);}				// Return: ReturnValue
		}
		namespace ANALYSE
		{
			namespace BARCODE
			{
				function Start(
					variable iSettingNameBarcode		// Name der Settings
					) variable {return(0);}			// Return: ReturnValue
				function Start_ParameterList(
					variable iSettingNameBarcode,		// Name der Settings
					variable iArrayParameterList[]	// 
					) variable {return(0);}			// Return: ReturnValue
				function Stop(
					) variable {return(0);}			// Return: ReturnValue
				function Reset(
					) variable {return(0);}			// Return: ReturnValue
				function CheckRunning(
					variable & oRunning			// Running-Flag
					) variable {return(0);}			// Return: ReturnValue
				function SaveResult(
					variable iAsynchronPictureSave,
					variable iDescription,
					variable & oEasyCodeIIRackID		// easyCodeIIRackID
					) variable {return(0);}			// Return: ReturnValue
				function SaveResult_CheckAsynchronSaveFinish(
					variable & oFinish			// Finish-Flag
					) variable {return(0);}			// Return: ReturnValue
				function ExportRackPicture(
					variable iEasyCodeIIRackID,	// easyCodeIIRackID
					variable iAsynchronPictureSave,
					variable iPictureFilenamePath,
					variable iPictureFormat,
					variable iDrawAnalysedInformation,
					variable iPictureCropped,
					variable iPictureSizePercent
					) variable {return(0);}			// Return: ReturnValue
				function ExportToZipArchive(
					variable iArrayEasyCodeIIRackID[],	// easyCodeIIRackID
					variable iArchiveFilenamePath,
					variable iArchiveAppendMode
					) variable {return(0);}			// Return: ReturnValue
			}//namspace BARCODE
		}//namespace ANALYSE
		namespace DATABASE
		{
			function GetEasyCodeIIRack(
				variable iEasyCodeIIRackID,		// easyCodeIIRackID
				variable & oPictureFilename,
				variable & oErrorCode,
				variable & oDescription
				) variable {return(0);}					// Return: ReturnValue
			function SetEasyCodeIIRack_Field_Description(
				variable iEasyCodeIIRackID,		// easyCodeIIRackID
				variable iDescription
				) variable {return(0);}			// Return: ReturnValue
			function GetEasyCodeIIGroup(
				variable iEasyCodeIIGroupID,		// easyCodeIIGroupID
				variable & oNumber,
				variable & oName,
				variable & oErrorCode,
				variable & oDescription
				) variable {return(0);}					// Return: ReturnValue
			function SetEasyCodeIIGroup_Field_Description(
				variable iEasyCodeIIGroupID,		// easyCodeIIGroupID
				variable iDescription
				) variable {return(0);}			// Return: ReturnValue
			function GetEasyCodeIIGroupID_By_EasyCodeIIRackID(
				variable iEasyCodeIIRackID,		// easyCodeIIRackID
				variable & oArrayEasyCodeIIGroupID[]	// Array of easyCodeIIGroupID
				) variable {return(0);}				// Return: ReturnValue
			function GetEasyCodeIIGroupID_By_Name(
				variable iEasyCodeIIRackID,			// easyCodeIIRackID
				variable iName,
				variable & oEasyCodeIIGroupID
				) variable {return(0);}			// Return: ReturnValue
			function GetEasyCodeIIGroup_LabwareInformation(
				variable iEasyCodeIIGroupID,	// easyCodeIIGroupID
				variable & oSectionsX,
				variable & oSectionsY
				) variable {return(0);}		// Return: ReturnValue
			function GetEasyCodeIIContainer(
				variable iEasyCodeIIContainerID,		// easyCodeIIContainerID
				variable & oBarcode,
				variable & oBarcodeType,
				variable & oPositionNumber,
				variable & oPositionText,
				variable & oQuality,
				variable & oQualityDetails,
				variable & oErrorCode,
				variable & oDescription
				) variable {return(0);}					// Return: ReturnValue
			function SetEasyCodeIIContainer_Field_Description(
				variable iEasyCodeIIContainerID,		// easyCodeIIContainerID
				variable iDescription
				) variable {return(0);}			// Return: ReturnValue
			function GetEasyCodeIIContainerID_By_EasyCodeIIGroupID(
				variable iEasyCodeIIGroupID,			// easyCodeIIGroupID
				variable & oArrayEasyCodeIIContainerID[]	// Array of easyCodeIIContainerID
				) variable {return(0);}				// Return: ReturnValue
			function GetEasyCodeIIContainerID_By_PositionNumber(
				variable iEasyCodeIIGroupID,				// easyCodeIIGroupID
				variable iPositionNumber,
				variable & oArrayEasyCodeIIContainerID[]		// Array of easyCodeIIContainerID
				) variable {return(0);}					// Return: ReturnValue
			function GetEasyCodeIIContainerID_By_PositionText(
				variable iEasyCodeIIGroupID,				// easyCodeIIGroupID
				variable iPositionText,
				variable & oArrayEasyCodeIIContainerID[]		// Array of easyCodeIIContainerID
				) variable {return(0);}					// Return: ReturnValue
		} //namspace DATABASE

		namespace HELPER
		{
			static function StrIStrMitNullen(
				variable Zahl,			// Number to be converted
				variable TotalLaenge		// String total length
				) variable {return(0);}				// Return: Converted string with leading zeros
			namespace LABWARE
			{
				function GetPositionCoordinates_Center_by_Labware(
					device	& ML_STAR,	// Device
					variable iLabware,		// Labware
					variable & oCoordinateX,	// Output Coordinate-X
					variable & oCoordinateY,	// Ausgabe Coordinate-Y
					variable & oCoordinateZ	// Coordinate-Z
					) variable {return(0);}			// Return: _NONE			= Position determined
					//		_LIBRARY_ERROR = Position not determined 
				function GetPositionCoordinates_by_Labware(
					device   & ML_STAR,       // Device
					variable iLabware,        // Labware
					variable & oCoordinateX,  // Coordinate-X
					variable & oCoordinateY,  // Coordinate-Y
					variable & oCoordinateZ   // Coordinate-Z
					) variable {return(0);}                  // Return: _NONE          = Position determined
					//         _LIBRARY_ERROR = Position not determined
				function GetPositionCoordinates_by_LabwarePosition(
					device	& ML_STAR,	// Device
					variable iLabware,		// Labware
					variable iPosition,	// Position
					variable & oCoordinateX,	// Coordinate-X
					variable & oCoordinateY,	// Coordinate-Y
					variable & oCoordinateZ	// Coordinate-Z
					) variable {return(0);}			// Return: _NONE			= Position determined
							//		_LIBRARY_ERROR = Position not determined
			} //namespace LABWARE
			namespace MLSTAR
			{
				function GetNumberOfPipettingChannels(
					device	& ML_STAR	// Device
					) variable {return(0);}				// Return: Number of channels
				function ChannelPattern_LeftAdjust(
					variable iNumberOfChannels,	// Anzahl Kanaele
					variable iTotalNumberOfChannels	// Anzahl Kanaele total
					) variable {return(0);}			// Return: Channel pattern
				function ChannelPattern_RightAdjust(
					variable iNumberOfChannels,	// Anzahl Kanaele
					variable iTotalNumberOfChannels	// Anzahl Kanaele total
					) variable {return(0);}			// Return: Channel pattern
				function ChannelPattern_SingleAdjust(
					variable iSingleChannel,		// Kanal
					variable iTotalNumberOfChannels	// Anzahl Kanaele total
					) variable {return(0);}			// Return: Channel pattern
			}//namespace MLSTAR
			namespace TRACE
			{
				function Trace2Text(
					variable iTraceLevel,		// Tracelevel
					variable iText1,		// Tracetext 1
					variable iText2			// Tracetext 2
					) variable {return(0);}	// Return: _NONE			= Output done
					//		_LIBRARY_ERROR = No output
				function Trace4Text(
					variable iTraceLevel,		// Tracelevel
					variable iText1,		// Tracetext 1
					variable iText2,		// Tracetext 2
					variable iText3,		// Tracetext 3
					variable iText4			// Tracetext 4
					) variable {return(0);}	// Return: _NONE			= Output done
					//		_LIBRARY_ERROR = No output
				function Trace6Text(
					variable iTraceLevel,		// Tracelevel
					variable iText1,		// Tracetext 1
					variable iText2,		// Tracetext 2
					variable iText3,		// Tracetext 3
					variable iText4,		// Tracetext 4
					variable iText5,		// Tracetext 5
					variable iText6			// Tracetext 6
					) variable {return(0);}	// Return: _NONE			= Output done
					//		_LIBRARY_ERROR = No output
				function TraceArrayStr(
					variable iTraceLevel,	// Tracelevel
					variable iArrayName,
					variable iArray[]	// Array Variable
					) variable {return(0);}			// Return: _NONE			= Output done
							//		_LIBRARY_ERROR = No output
				function TraceArrayInt(
					variable iTraceLevel,	// Tracelevel
					variable iArrayName,
					variable iArray []		// Array Variable
					) variable {return(0);}			// Return: _NONE			= Output done
							//		_LIBRARY_ERROR = No output
				function TraceArrayFloat(
					variable iTraceLevel,	// Tracelevel
					variable iArrayName,
					variable iArray[]	// Array Variable
					) variable {return(0);}			// Return: _NONE			= Output done
							//		_LIBRARY_ERROR = No output
				function TraceSequence(
					variable iTraceLevel,		// Tracelevel
					sequence iSequence			// Sequence
					) variable {return(0);}	// Return: _NONE			= Output done
					// _LIBRARY_ERROR = No output
			}//namespace TRACE
			namespace SEQUENCE
			{
				function Init(
					sequence & oSequence	// Sequence
					) variable {return(0);}
				function Add(
					sequence iSourceSequence1,	// Source Sequence
					sequence iSourceSequence2,	// Source Sequence
					sequence & oDestinationSequence // Out Sequence
					) variable {return(0);}
				function Copy(
					sequence iSourceSequence,	// Source Sequence
					sequence & oDestinationSequence // Out Sequence
					) variable {return(0);}
			}// namespace SEQUENCE
		}//namespace HELPER
		namespace MLSTAR
		{
			static function ExecFW_Cmd(
				device & ML_STAR,
				variable cmd,
				variable prm
				) variable {return(0);}

			function Light_On(
				device & ML_STAR,	// Device
				variable iLightSource,	// PWM number and DIV2 or DIV3 connector
				variable iPercent	// Lightintensity
				) variable {return(0);}
			function Light_Off(
				device & ML_STAR,	// Device
				variable iLightSource	// PWM number and DIV2 or DIV3 connector
				) variable {return(0);}
			function Light_Off_All(
				device & ML_STAR	// Device
				) variable {return(0);}
		}// end namespace MLSTAR
	}// namespace EASYCODEII
#endif
#endif
// $$author=Henrik$$valid=0$$time=2025-08-26 11:10$$checksum=8f62f785$$length=085$$
