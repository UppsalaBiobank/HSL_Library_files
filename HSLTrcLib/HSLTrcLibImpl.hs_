// ======================================================================
// This is a part of the Trace Library.
//
// ======================================================================
//
// Modification History
//
// ======================================================================
#ifndef __HSLTrcLibImpl_hs___
#define __HSLTrcLibImpl_hs___  1

// Implementation of Trace library 
#ifdef HSL_RUNTIME

function TrcInputBox(variable& prompt, variable& title, variable type) variable
{
   return(InputBox(prompt, title, type));
}

function TrcMessageBox(variable& message, variable& title, variable type) variable
{
   return(MessageBox(message, title, type));
}

function TrcTrace(variable variable1, variable variable2) void
{
   Trace(variable1, variable2);
}

function TrcTrace4(variable variable1, variable variable2, variable variable3, variable variable4) void
{
   Trace(variable1, variable2, variable3, variable4);
}

function TrcTrace8(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void
{
   Trace(variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8);
}

function TrcTrace12(variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void
{
   Trace(variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9, variable10, variable11, variable12);
}

function TrcFormatTrace(variable& source, variable& action, variable status, variable variable1, variable variable2) void
{
   FormatTrace(source, action, status, variable1, variable2);
}

function TrcFormatTrace4(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4) void
{
   FormatTrace(source, action, status, variable1, variable2, variable3, variable4);
}

function TrcFormatTrace8(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8) void
{
   FormatTrace(source, action, status, variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8);
}

function TrcFormatTrace12(variable& source, variable& action, variable status, variable variable1, variable variable2, variable variable3, variable variable4, variable variable5, variable variable6, variable variable7, variable variable8, variable variable9, variable variable10, variable variable11, variable variable12) void
{
   FormatTrace(source, action, status, variable1, variable2, variable3, variable4, variable5, variable6, variable7, variable8, variable9, variable10, variable11, variable12);
}
// Traces the attributes of the supplied sequence 
function TrcTraceSequence(sequence& sequenceObj) void
{
   variable currentPosBak;    // backup of current position
   variable countPosBak;      // backup of count position
   variable index;            // loop index
   variable labwareId(Translate("labwareId"));
   variable positionId(Translate("positionId"));

   // backup original current position 
   currentPosBak = sequenceObj.GetCurrentPosition();

   // backup original count position 
   countPosBak = sequenceObj.GetCount();

   // set count to total
   sequenceObj.SetCount(sequenceObj.GetTotal());

   // trace attributes 
   Trace(Translate("name = "), sequenceObj.GetName());
   Trace(Translate("current = "), currentPosBak);
   Trace(Translate("count = "), countPosBak);
   Trace(Translate("total = "), sequenceObj.GetTotal());
   Trace(Translate("max = "), sequenceObj.GetMax());
   Trace(Translate("used = "), sequenceObj.GetUsedPositions());
   for (index = sequenceObj.SetCurrentPosition(1); 
       index != 0; 
       index = sequenceObj.Increment(1))
       Trace(labwareId, " = ", sequenceObj.GetLabwareId(), ", ", positionId, " = ", sequenceObj.GetPositionId());

   // restore original count position
   sequenceObj.SetCount(countPosBak);

   // restore original current position 
   sequenceObj.SetCurrentPosition(currentPosBak);
}

function TrcGetMethodFileName() variable
{
   return(GetMethodFileName());
}

static function TrcGetFileName() variable
{
   return(GetFileName());
}

static function TrcGetFunctionName() variable
{
   return(GetFunctionName());
}

static function TrcGetLineNumber() variable
{
   return(GetLineNumber());
}
#endif
#endif
